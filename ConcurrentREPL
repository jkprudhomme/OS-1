package cs131.pa1.filter.concurrent;

import cs131.pa1.filter.Message;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Queue;
import java.util.Scanner;

public class ConcurrentREPL {

	static String currentWorkingDirectory;
	static HashMap<Integer, Thread> commandsList;

	public static void main(String[] args) {
		currentWorkingDirectory = System.getProperty("user.dir");
		commandsList = new HashMap<Integer, Thread>();
		Scanner s = new Scanner(System.in);
		System.out.print(Message.WELCOME);
		String command;
		int commandNumber = 1;
		while (true) {
			// obtaining the command from the user
			System.out.print(Message.NEWCOMMAND);
			command = s.nextLine();
			if (command.equals("exit")) {
				break;
			} else if (command.equals("repl_jobs")) {
				repl_jobs();
			} else if (command.contains("kill")) {
				kill(Integer.parseInt(command.replaceAll("kill", "").trim()));
			} else if (!command.trim().equals("")) {
				// building the filters list from the command
				ConcurrentFilter filterlist = ConcurrentCommandBuilder.createFiltersFromCommand(command);
				while (filterlist != null) {
					// ADD IN THREADING HERE
					// ******************
					// ******************
					// ******************
					Thread currentThread = new Thread(filterlist);
					currentThread.run();
					commandsList.put(commandNumber, currentThread);
					// filterlist.process();
					filterlist = (ConcurrentFilter) filterlist.getNext();
					commandNumber++;
				}
			}
		}
		s.close();
		System.out.print(Message.GOODBYE);
	}

	private static void repl_jobs() {
		for (int key : commandsList.keySet()) {
			String value = commandsList.get(key).toString();
			System.out.println(key + ". " + value);
		}
	}
	
	private static void kill(int key) {
		commandsList.get(key).interrupt();
	}


}
